#!/usr/bin/env bash

##########################################################################
# Control Flags
##########################################################################

flag=$1

##########################################################################
# Global Variables
##########################################################################
RED="\u001b[31;1m"
GREEN="\033[0;32m"
NC="\033[0m"

if [ -x "$(command -v docker)" ]; then

##########################################################################
# Fancy logo Stuff
##########################################################################
echo -e "....................${GREEN}.${NC}....................";
echo -e "..................${GREEN},ol${NC}....................";
echo -e ".................${GREEN}:dxl${NC}....................";
echo -e "...............${GREEN},lxxxl${NC}....................";
echo -e "..............${GREEN}:dxxxxl${NC}....................";
echo -e ".............${GREEN}lxxxxxxo${NC}....................";
echo -e "...........${GREEN}:dxxxxxxxl${NC}....${GREEN}SUPABASE${NC}........";
echo -e "..........${GREEN}lxxxxxxxxxl${NC}....................";
echo -e "........${GREEN};oxxxxxxxxxxo${NC}....................";
echo -e ".......${GREEN}ldxxxxxxxxxxxdc:ccclllooodddxxl${NC}...";
echo -e ".....${GREEN};oxxxxxxxxxxxxxdc:cclllooodddddc${NC}....";
echo -e "....${GREEN}cdxxxxxxxxxxxxxxdlccllloooodddo;${NC}.....";
echo -e "...${GREEN}llllllllllllllllccclllooooddddc${NC}.......";
echo -e ".....................${GREEN}:lllloooddo;${NC}........";
echo -e ".....................${GREEN}:llloooodc${NC}..........";
echo -e ".....................${GREEN}:llooooo;${NC}...........";
echo -e ".....................${GREEN}:lloooc${NC}.............";
echo -e ".....................${GREEN}:oool;${NC}..............";
echo -e ".....................${GREEN}:ooc${NC}................";
echo -e ".....................${GREEN}cl;${NC}.................";
echo -e ".....................${GREEN},${NC}...................";

echo -e "";
echo -e "${GREEN}Lets get started, We just need a few details from you${NC} ";

##########################################################################
# Installation Directory
##########################################################################
echo -e "";
read -p "$(echo -e "1. Enter an installation directory (Default: /home/%username%/DEPLOY/supabase) ${RED}[Required]${NC}: ")" SCRIPT_DIR
if [ -z "$SCRIPT_DIR" ]
then
    while [[ -z "$SCRIPT_DIR" ]]; do
        read -p "$(echo -e "   You forgot to an installation directory: ")" SCRIPT_DIR
    done
fi

##########################################################################
# Postgres Database Password
##########################################################################
read -sp "2. Enter a password for your Postgres Database (If left blank, it will be autogenerated): " POSTGRES_PASSWORD

##########################################################################
# JWT Secret (Will be used to sign Anon Role and Service Role keys)
##########################################################################
echo -e "";
read -sp "3. Enter a JWT Secret to be used by Supabase (If left blank, it will be autogenerated): " JWT_SECRET

##########################################################################
# SUPABASE URL (STUDIO, POSTGRES, KONG ETC)
##########################################################################
echo -e "";
read -p "$(echo -e "4. Enter the domain you will use to access Supabase Studio ${RED}[Required]${NC}: https://")" domain
if [ -z "$domain" ]
then
    while [[ -z "$domain" ]]; do
        read -p "$(echo -e "   You forgot to pick a domain for your Supabase instance, try again ${RED}[Required]${NC}: https://")" domain
    done
fi

##########################################################################
# EMAIL SIGN UPS
##########################################################################
read -p "$(echo -e "5. Do you wish to enable Email Signups? ${RED}[You will require a custom SMTP Server]${NC} [y/n]: ")" enable_email_signup
if [[ $enable_email_signup == "Y" || $enable_email_signup == "y" ]]
then
    enable_email_signup=true

    ##########################################################################
    # EMAIL AUTO CONFIRMATION
    ##########################################################################
    read -p "$(echo -e "   Do you wish to enable Email Auto Confirmation? [Y/N]: ")" ENABLE_EMAIL_AUTOCONFIRM
    if [[ -z "$ENABLE_EMAIL_AUTOCONFIRM" || ENABLE_EMAIL_AUTOCONFIRM == "n" || ENABLE_EMAIL_AUTOCONFIRM == "N" ]]
    then
        ENABLE_EMAIL_AUTOCONFIRM="false"
    else    
        ENABLE_EMAIL_AUTOCONFIRM="true"
    fi

    ##########################################################################
    # SMTP HOST
    ##########################################################################
    read -p "$(echo -e "   Enter your SMTP Host: ")" SMTP_HOST
    if [ -z "$SMTP_HOST" ]
    then
    while [[ -z "$SMTP_HOST" ]]; do
        read -p "$(echo -e "      ${RED}Invalid input, try again:${NC} ")" SMTP_HOST
    done
    fi

    ##########################################################################
    # SMTP PORT
    ##########################################################################
    read -p "$(echo -e "   Enter your SMTP Port: ")" SMTP_PORT
    if [ -z "$SMTP_PORT" ]
    then
    while [[ -z "$SMTP_PORT" ]]; do
        read -p "$(echo -e "      ${RED}Invalid input, try again:${NC} ")" SMTP_PORT
    done
    fi

    ##########################################################################
    # SMTP USERNAME
    ##########################################################################
    read -p "$(echo -e "   Enter your SMTP Username: ")" SMTP_USER
    if [ -z "$SMTP_USER" ]
    then
    while [[ -z "$SMTP_USER" ]]; do
        read -p "$(echo -e "      ${RED}Invalid input, try again:${NC} ")" SMTP_USER
    done
    fi

    ##########################################################################
    # SMTP PASSWORD
    ##########################################################################
    read -p "$(echo -e "   Enter your SMTP Password: ")" SMTP_PASS
    if [ -z "$SMTP_PASS" ]
    then
    while [[ -z "$SMTP_PASS" ]]; do
        read -p "$(echo -e "      ${RED}Invalid input, try again:${NC} ")" SMTP_PASS
    done
    fi

    ##########################################################################
    # SMTP SENDER EMAIL
    ##########################################################################
    read -p "$(echo -e "   Enter your SMTP Sender Name: ")" smtp_sender
    if [ -z "$smtp_sender" ]
    then
    while [[ -z "$smtp_sender" ]]; do
        read -p "$(echo -e "      ${RED}Invalid input, try again:${NC} ")" smtp_sender
    done
    fi
else
    ENABLE_EMAIL_SIGNUP=false
    ENABLE_EMAIL_AUTOCONFIRM=false
    SMTP_ADMIN_EMAIL=some-fake-email
    SMTP_HOST=some-fake-host
    SMTP_PORT=1337
    SMTP_USER=some-fake-email
    SMTP_PASS=some-fake-password
    SMTP_SENDER_NAME=noreply
fi

##########################################################################
# Generate random password if blank
##########################################################################
if [ -z "$POSTGRES_PASSWORD" ]
then
    POSTGRES_PASSWORD=`cat /dev/urandom | tr -dc "a-zA-Z0-9-_" | fold -w 64 | head -n 1`
fi

##########################################################################
# Generate random JWT_SECRET if blank
##########################################################################
if [ -z "$JWT_SECRET" ]
then
    JWT_SECRET=`cat /dev/urandom | tr -dc "a-zA-Z0-9-_" | fold -w 64 | head -n 1`
fi

##########################################################################
# Default Variables: GO TRUE
##########################################################################
SITE_URL="http://localhost:3000"
ADDITIONAL_REDIRECT_URLS=
JWT_EXPIRY=3600
DISABLE_SIGNUP=false
ENABLE_PHONE_SIGNUP=false
ENABLE_PHONE_AUTOCONFIRM=false

##########################################################################
# Default Variables: Ports
##########################################################################
STUDIO_PORT=3000
KONG_HTTP_PORT=8000
KONG_HTTPS_PORT=8443
POSTGRES_PORT=5432

##########################################################################
# Default Variables: Postgres Defaults
##########################################################################
POSTGRES_USER="postgres"
POSTGRES_DB="supabase"

##########################################################################
# GENERATE ANON & SERVICE ROLE JWT KEYS
##########################################################################
base64_encode() {
        declare input=${1:-$(</dev/stdin)}
        # Use `tr` to URL encode the output from base64.
        printf '%s' "${input}" | base64 | tr -d '=' | tr '/+' '_-' | tr -d '\n'
}

json() {
        declare input=${1:-$(</dev/stdin)}
        printf '%s' "${input}"
}

hmacsha256_sign() {
        declare input=${1:-$(</dev/stdin)}
        printf '%s' "${input}" | openssl dgst -binary -sha256 -hmac "${JWT_SECRET}"
}

header='{"alg": "HS256","typ": "JWT"}'
anon_payload='{"role": "anon","iss": "supabase","iat": 1643806800,"exp": 1801573200}'
service_role_payload='{"role": "service_role","iss": "supabase","iat": 1643806800,"exp": 1801573200}'

header_base64=$(echo "${header}" | json | base64_encode)

anon_payload_base64=$(echo "${anon_payload}" | json | base64_encode)
anon_header_payload=$(echo "${header_base64}.${anon_payload_base64}")
anon_signature=$(echo "${anon_header_payload}" | hmacsha256_sign | base64_encode)

service_role_payload_base64=$(echo "${service_role_payload}" | json | base64_encode)
service_role_header_payload=$(echo "${header_base64}.${service_role_payload_base64}")
service_role_signature=$(echo "${service_role_header_payload}" | hmacsha256_sign | base64_encode)

ANON_KEY="${anon_header_payload}.${anon_signature}"
SERVICE_ROLE_KEY="${service_role_header_payload}.${service_role_signature}"

##########################################################################
# File Setup
##########################################################################
if [[ $flag == '--reset' ]]
then
    rm -rf "${SCRIPT_DIR}/volumes" >> /dev/null
fi

if [[ ! -d "${SCRIPT_DIR}/volumes/db" && ! -d "${SCRIPT_DIR}/volumes/api" ]]
then
    mkdir -p "${SCRIPT_DIR}/volumes/db/init" >> /dev/null
    curl -s "https://raw.githubusercontent.com/christopher-talke/docker-cli-supabase/main/volumes/db/init/00-initial-schema.sql" > "${SCRIPT_DIR}/volumes/db/init/00-initial-schema.sql"
    curl -s "https://raw.githubusercontent.com/christopher-talke/docker-cli-supabase/main/volumes/db/init/01-auth-schema.sql" > "${SCRIPT_DIR}/volumes/db/init/01-auth-schema.sql"
    curl -s "https://raw.githubusercontent.com/christopher-talke/docker-cli-supabase/main/volumes/db/init/02-storage-schema.sql" > "${SCRIPT_DIR}/volumes/db/init/02-storage-schema.sql"
    curl -s "https://raw.githubusercontent.com/christopher-talke/docker-cli-supabase/main/volumes/db/init/03-post-setup.sql" > "${SCRIPT_DIR}/volumes/db/init/03-post-setup.sql"

    mkdir -p "${SCRIPT_DIR}/volumes/api" >> /dev/null
    curl -s "https://raw.githubusercontent.com/christopher-talke/docker-cli-supabase/main/volumes/api/kong.yml" > "${SCRIPT_DIR}/volumes/api/kong.yml"
fi

sed -i "s/anon-role-replace/${ANON_KEY}/" "${SCRIPT_DIR}/volumes/api/kong.yml" >> /dev/null
sed -i "s/service-role-replace/${SERVICE_ROLE_KEY}/" "${SCRIPT_DIR}/volumes/api/kong.yml" >> /dev/null

####################################################################################################################################################
# Start Of Docker Processing
####################################################################################################################################################

echo ""
if [[ $flag == '--reset' ]]
then
    echo ">>> Starting cleanup process"
    echo ">>>>>> Removing docker containers from supabase-network..."
    docker network disconnect $NETWORK_NAME supabase-meta &> /dev/null
    docker network disconnect $NETWORK_NAME supabase-storage &> /dev/null
    docker network disconnect $NETWORK_NAME supabase-rest &> /dev/null
    docker network disconnect $NETWORK_NAME supabase-auth &> /dev/null
    docker network disconnect $NETWORK_NAME supabase-studio &> /dev/null
    docker network disconnect $NETWORK_NAME supabase-db &> /dev/null

    echo ">>>>>> Removing supabase-network..."
    docker network rm $NETWORK_NAME &> /dev/null

    echo ">>>>>> Cleaning up existing docker containers..."
    docker rm -f supabase-meta &> /dev/null &&
    docker rm -f supabase-storage &> /dev/null &&
    docker rm -f supabase-rest &> /dev/null &&
    docker rm -f supabase-auth &> /dev/null &&
    docker rm -f supabase-studio &> /dev/null &&
    docker rm -f supabase-realtime &> /dev/null &&
    docker rm -f supabase-db &> /dev/null

    echo ">>>>>> All cleaned up..."
fi 

# Docker Network
NETWORK_NAME="supabase-network"

echo ""
echo ">>> Creating Network '$NETWORK_NAME'..."
    docker network rm $NETWORK_NAME &> /dev/null
    docker network create $NETWORK_NAME &> /dev/null
echo ">>>>>> Network Created!"
echo ""

# Database Service
DB_CONTAINER_NAME="supabase-db"

echo ">>> Creating Postgres Database '$DB_CONTAINER_NAME'..."
docker stop $DB_CONTAINER_NAME &> /dev/null
docker kill $DB_CONTAINER_NAME &> /dev/null
docker rm $DB_CONTAINER_NAME &> /dev/null

docker run -d \
    --name=$DB_CONTAINER_NAME \
    -e POSTGRES_PASSWORD=$POSTGRES_PASSWORD \
    -e POSTGRES_USER=$POSTGRES_USER \
    -e POSTGRES_DB=$POSTGRES_DB \
    -v ${SCRIPT_DIR}/volumes/db/data:/var/lib/postgresql/data \
    -v ${SCRIPT_DIR}/volumes/db/init:/docker-entrypoint-initdb.d \
    -p 5432:5432 \
    --restart unless-stopped \
    --network $NETWORK_NAME \
    supabase/postgres:latest &> /dev/null

echo ">>>>>> Waiting for database to finish setting itself up..."
sleep 120
echo ">>>>>> Excuting some commands against the database... gimme a sec..."
sleep 30
docker exec -u root $DB_CONTAINER_NAME bash -c 'su postgres -c postgres -c config_file=/etc/postgresql/postgresql.conf' &> /dev/null
echo ">>>>>> Finished setting up database!"


# Studio Service
STUDIO_CONTAINER_NAME="supabase-studio"

echo ""
echo ">>> Creating Web UI for Supabase '$STUDIO_CONTAINER_NAME'..."
docker stop $STUDIO_CONTAINER_NAME &> /dev/null
docker kill $STUDIO_CONTAINER_NAME &> /dev/null
docker rm $STUDIO_CONTAINER_NAME &> /dev/null

docker run -d \
    --name=$STUDIO_CONTAINER_NAME \
    -e SUPABASE_URL="https://supabase.talke.dev" \
    -e STUDIO_PG_META_URL="http://supabase-meta:8080" \
    -e SUPABASE_ANON_KEY=$ANON_KEY \
    -e SUPABASE_SERVICE_KEY=$SERVICE_ROLE_KEY \
    -p 3000:3000 \
    --restart unless-stopped \
    --network $NETWORK_NAME \
    supabase/studio:latest &> /dev/null
echo ">>>>>> Finished setting up Web UI!"

# Kong Service
KONG_CONTAINER_NAME="supabase-kong"

docker stop $KONG_CONTAINER_NAME &> /dev/null
docker kill $KONG_CONTAINER_NAME &> /dev/null
docker rm $KONG_CONTAINER_NAME &> /dev/null

echo ""
echo ">>> Creating API Gateway '$KONG_CONTAINER_NAME'..."
docker run -d \
    --name=$KONG_CONTAINER_NAME \
    -e KONG_DATABASE="off" \
    -e KONG_DECLARATIVE_CONFIG="/var/lib/kong/kong.yml" \
    -e KONG_DNS_ORDER="LAST,A,CNAME" \
    -e KONG_PLUGINS="request-transformer,cors,key-auth,acl" \
    -v ${SCRIPT_DIR}/volumes/api/kong.yml:/var/lib/kong/kong.yml \
    -p 8000:8000 \
    -p 8443:8443 \
    --restart unless-stopped \
    --network $NETWORK_NAME \
    kong:latest &> /dev/null
echo ">>>>>> Finished setting up API Gateway!"

# Auth Service
AUTH_CONTAINER_NAME="supabase-auth"

docker stop $AUTH_CONTAINER_NAME &> /dev/null
docker kill $AUTH_CONTAINER_NAME &> /dev/null
docker rm $AUTH_CONTAINER_NAME &> /dev/null

echo ""
echo ">>> Creating Authentication Service '$AUTH_CONTAINER_NAME'..."
docker run -d \
    --name=$AUTH_CONTAINER_NAME \
    -e GOTRUE_API_HOST=0.0.0.0 \
    -e GOTRUE_API_PORT=9999 \
    -e GOTRUE_DB_DRIVER="postgres" \
    -e GOTRUE_DB_DATABASE_URL="postgres://$POSTGRES_USER:$POSTGRES_PASSWORD@supabase-db:5432/$POSTGRES_DB?search_path=auth" \
    -e GOTRUE_SITE_URL=$SITE_URL \
    -e GOTRUE_URI_ALLOW_LIST=$ADDITIONAL_REDIRECT_URLS \
    -e GOTRUE_DISABLE_SIGNUP=$DISABLE_SIGNUP \
    -e GOTRUE_JWT_SECRET=$JWT_SECRET \
    -e GOTRUE_JWT_EXP=$JWT_EXPIRY \
    -e GOTRUE_JWT_DEFAULT_GROUP_NAME="authenticated" \
    -e GOTRUE_EXTERNAL_EMAIL_ENABLED=$ENABLE_EMAIL_SIGNUP \
    -e GOTRUE_MAILER_AUTOCONFIRM=$ENABLE_EMAIL_AUTOCONFIRM \
    -e GOTRUE_SMTP_ADMIN_EMAIL=$SMTP_ADMIN_EMAIL \
    -e GOTRUE_SMTP_HOST=$SMTP_HOST \
    -e GOTRUE_SMTP_PORT=$SMTP_PORT \
    -e GOTRUE_SMTP_USER=$SMTP_USER \
    -e GOTRUE_SMTP_PASS=$SMTP_PASS \
    -e GOTRUE_SMTP_SENDER_NAME=$SMTP_SENDER_NAME \
    -e GOTRUE_MAILER_URLPATHS_INVITE="/auth/v1/verify" \
    -e GOTRUE_MAILER_URLPATHS_CONFIRMATION="/auth/v1/verify" \
    -e GOTRUE_MAILER_URLPATHS_RECOVERY="/auth/v1/verify" \
    -e GOTRUE_MAILER_URLPATHS_EMAIL_CHANGE="/auth/v1/verify" \
    -e GOTRUE_EXTERNAL_PHONE_ENABLED=$ENABLE_PHONE_SIGNUP \
    -e GOTRUE_SMS_AUTOCONFIRM=$ENABLE_PHONE_AUTOCONFIRM \
    --restart unless-stopped \
    --network $NETWORK_NAME \
    supabase/gotrue:latest &> /dev/null
echo ">>>>>> Finished setting up Authentication Service!"


# Auth Service
REST_CONTAINER_NAME="supabase-rest"

docker stop $REST_CONTAINER_NAME &> /dev/null
docker kill $REST_CONTAINER_NAME &> /dev/null
docker rm $REST_CONTAINER_NAME &> /dev/null

echo ""
echo ">>> Creating REST API '$REST_CONTAINER_NAME'..."
docker run -d \
    --name=$REST_CONTAINER_NAME \
    -e PGRST_DB_URI="postgres://$POSTGRES_USER:$POSTGRES_PASSWORD@supabase-db:5432/$POSTGRES_DB" \
    -e PGRST_DB_SCHEMA="public,storage" \
    -e PGRST_DB_ANON_ROLE="anon" \
    -e PGRST_JWT_SECRET=$JWT_SECRET \
    -e PGRST_DB_USE_LEGACY_GUCS="false" \
    --restart unless-stopped \
    --network $NETWORK_NAME \
    postgrest/postgrest:latest &> /dev/null
echo ">>>>>> Finished setting up REST API!"

# Realtime Service
REALTIME_CONTAINER_NAME="supabase-realtime"

docker stop $REALTIME_CONTAINER_NAME &> /dev/null
docker kill $REALTIME_CONTAINER_NAME &> /dev/null
docker rm $REALTIME_CONTAINER_NAME &> /dev/null

echo ""
echo ">>> Creating Realtime Service '$REALTIME_CONTAINER_NAME'..."
docker run -d \
    --name=$REALTIME_CONTAINER_NAME \
    -e DB_HOST="supabase-db" \
    -e DB_PORT=5432 \
    -e DB_NAME=$POSTGRES_DB \
    -e DB_USER=$POSTGRES_USER \
    -e DB_PASSWORD=$POSTGRES_PASSWORD \
    -e DB_SSL="false" \
    -e PORT=4000 \
    -e JWT_SECRET=$JWT_SECRET \
    -e REPLICATION_MODE="RLS" \
    -e REPLICATION_POLL_INTERVAL=100 \
    -e SECURE_CHANNELS="true" \
    -e SLOT_NAME="supabase_realtime_rls" \
    -e TEMPORARY_SLOT="true" \
    --restart unless-stopped \
    --network $NETWORK_NAME \
    supabase/realtime:latest &> /dev/null
echo ">>>>>> Finished setting up Realtime Service!"
echo ">>>>>> Excuting some commands against the database... gimme a sec..."
sleep 30
docker exec $REALTIME_CONTAINER_NAME bash -c './prod/rel/realtime/bin/realtime eval Realtime.Release.migrate && ./prod/rel/realtime/bin/realtime start' &> /dev/null
echo ">>>>>> Finished setting up database!"

# Storage Service
STORAGE_CONTAINER_NAME="supabase-storage"

docker stop $STORAGE_CONTAINER_NAME &> /dev/null
docker kill $STORAGE_CONTAINER_NAME &> /dev/null
docker rm $STORAGE_CONTAINER_NAME &> /dev/null

echo ""
echo ">>> Creating Storage Service '$STORAGE_CONTAINER_NAME'..."
docker run -d \
    --name=$STORAGE_CONTAINER_NAME \
    -e ANON_KEY=$ANON_KEY \
    -e SERVICE_KEY=$SERVICE_ROLE_KEY \
    -e POSTGREST_URL="http://supabase-rest:3000" \
    -e PGRST_JWT_SECRET=$JWT_SECRET \
    -e DATABASE_URL="postgres://$POSTGRES_USER:$POSTGRES_PASSWORD@supabase-db:5432/$POSTGRES_DB" \
    -e PGOPTIONS="-c search_path=storage,public" \
    -e FILE_SIZE_LIMIT=52428800 \
    -e STORAGE_BACKEND="file" \
    -e FILE_STORAGE_BACKEND_PATH="/var/lib/storage" \
    -e TENANT_ID="stub" \
    -e REGION="stub" \
    -e GLOBAL_S3_BUCKET="stub" \
    --restart unless-stopped \
    --network $NETWORK_NAME \
    -v ${SCRIPT_DIR}/volumes/storage:/var/lib/storage \
    supabase/storage-api:latest &> /dev/null
echo ">>>>>> Finished setting up Storage Service!"

# Meta Service
META_CONTAINER_NAME="supabase-meta"

docker stop $META_CONTAINER_NAME &> /dev/null
docker kill $META_CONTAINER_NAME &> /dev/null
docker rm $META_CONTAINER_NAME &> /dev/null

echo ""
echo ">>> Creating Meta Service '$META_CONTAINER_NAME'..."
docker run -d \
    --name=$META_CONTAINER_NAME \
    -e PG_META_PORT=8080 \
    -e PG_META_DB_HOST="supabase-db" \
    -e PG_META_DB_PASSWORD=$POSTGRES_PASSWORD \
    --restart unless-stopped \
    --network $NETWORK_NAME \
    -v ${SCRIPT_DIR}/volumes/storage:/var/lib/storage \
    supabase/postgres-meta:latest &> /dev/null
echo ">>>>>> Finished setting up Meta Service!"

####################################################################################################################################################
# End Of Docker Processing
####################################################################################################################################################

##########################################################################
# Final output
##########################################################################

echo -e "";
echo -e "---------------------------------------------------------------------------";
echo -e "${GREEN}All set you are ready to go! See below for your Supabase details:${NC}";
echo -e "";
echo -e "Postgres Password:         ${POSTGRES_PASSWORD}";
echo -e "JWT Secret:                ${JWT_SECRET}";
echo -e "Supabase URL:              https://${domain}";
echo -e "Postgres URL:              postgres://${domain}:5432";
echo -e "";
echo -e "${RED}[Please keep this information somewhere safe]${NC}";
echo -e "---------------------------------------------------------------------------";

##########################################################################
# Error Output for Docker Check
##########################################################################

else
    echo -e "";
    echo -e "---------------------------------------------------------------------------";
    echo -e "${RED}[Error]${NC}";
    echo -e "Install Docker:        https://docs.docker.com/engine/install/";
    echo -e "---------------------------------------------------------------------------";
fi